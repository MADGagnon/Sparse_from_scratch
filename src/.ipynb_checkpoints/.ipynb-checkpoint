{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Auteurs : Maud Moerel-Martini et Marc-Antoine Dufresne Gagnon\n",
    "#Projet   : IFT2015 - Structure de Donnees - TP1\n",
    "\n",
    "import numpy as np\n",
    "import math as math\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SparseMatrix:\n",
    "\n",
    "    def __init__(self, fromiter, shape):\n",
    "        n, m = shape\n",
    "        self.shape = shape\n",
    "        self.n = n\n",
    "        self.m = m\n",
    "        self.nnz = 0 # TODO: nombre de valeurs non-nulles\n",
    "        self.rowptr = [0] # liste de taille n + 1 des intervalles des colonnes, commence a 0\n",
    "        self.colind = [] # liste de taille nnz des indices des valeurs non-nulles\n",
    "        \n",
    "############### Methode simple, plusieurs loops, possible plus petit ? #######TODO\n",
    "        self.data = [] # liste de taille nnz des valeurs non-nulles\n",
    "        \n",
    "        for i,e in enumerate(fromiter):#Chaque range de la matrice\n",
    "            nombre_valeurs_range=0 #Compteur pour utiliser le nombre de laveurs sur la range\n",
    "            for j,f in enumerate(e):#Chaque valeur de la range de la matrice\n",
    "                if(f != 0):#valeur != 0\n",
    "                    nombre_valeurs_range += 1 \n",
    "                    self.nnz += 1\n",
    "                    self.colind.append(j)#On ajoute les indice de colonnes correxpondant aux valeurs \n",
    "                    self.data.append(f)#On ajoute la valeur dans le tableau des valeurs\n",
    "            self.rowptr.append((self.rowptr[len(self.rowptr)-1]+nombre_valeurs_range)) # valeur precedente de rowptr + nombre valeurs sur range\n",
    "        \n",
    "#        indices_matrice = np.nonzero(fromiter)\n",
    " #       self.colind = indices_matrice[len(indices_matrice)-1]\n",
    "  #      indices_ranges = indices_matrice[len(indices_matrice)-2]\n",
    "             \n",
    "    def __getitem__(self, k): #TODO il faut verifier et ajouter le error handling si i ou j est plus quand que n et m, ou plus petit que 0, ou None\n",
    "        i, j = k # i est la colonne, j la range\n",
    "            \n",
    "        indices_range = range(self.rowptr[i], self.rowptr[i+1])#contient les indices de colind et data où les colonnes et les valeurs non-nulles de la rangée i sont stockées.\n",
    "                \n",
    "        while indices_range:\n",
    "            k = math.floor(len(indices_range)/2)\n",
    "            if self.colind[indices_range[k]] is j:\n",
    "                return self.data[indices_range[k]] # Pours toutes les valeurs non nulles, nous verifions si la colonne est pour cette range a une valeur. si oui, on la retourne\n",
    "            elif self.colind[indices_range[k]] > j:\n",
    "                indices_range = indices_range[0:math.floor(len(indices_range)/2)]\n",
    "            elif self.colind[indices_range[k]] < j:\n",
    "                indices_range = indices_range[math.ceil(len(indices_range)/2):len(indices_range)]\n",
    "                \n",
    "        return 0  # Si non, on retourne 0\n",
    "    \n",
    "    def todense(self):\n",
    "    #######Methode simple, plusieurs loops#######\n",
    "        #dense = [] #initialization de la matrice\n",
    "        #nbr_val_place = 0 #compteur pour se rapeller de combiens de valeurs sont places\n",
    "        #for i in range(self.n):\n",
    "        #    list_zeros = np.zeros(self.m) \n",
    "        #    for j in range(self.rowptr[i+1]-self.rowptr[i]):\n",
    "        #        list_zeros[self.colind[nbr_val_place]] = self.data[nbr_val_place]\n",
    "        #        nbr_val_place += 1\n",
    "        #    dense.append(list_zeros)\n",
    "        #return dense\n",
    "        \n",
    "    ######Methode un peu plus complexe, possiblement plus facile a appliquer a plusieurs dimensions ?\n",
    "\n",
    "        nombre_elements_matrice = 1\n",
    "        for i in self.shape :\n",
    "            nombre_elements_matrice *= i\n",
    "        \n",
    "        dense = self.data #tableau des valeurs non 0\n",
    "        data_count = 0\n",
    "        horizontal_count = 0\n",
    "        vertical_count = 0\n",
    "        line_count = self.rowptr[vertical_count+1]-self.rowptr[vertical_count]\n",
    "        \n",
    "        while len(dense) is not nombre_elements_matrice :\n",
    "            if data_count is not len(self.data):\n",
    "                if (horizontal_count is self.m) :\n",
    "                    horizontal_count = 0\n",
    "                    vertical_count += 1\n",
    "                    line_count = self.rowptr[vertical_count+1]-self.rowptr[vertical_count]\n",
    "                elif (line_count is 0) or (horizontal_count < self.colind[data_count]) :\n",
    "                    dense.insert(vertical_count*3+horizontal_count,0)\n",
    "                    horizontal_count += 1\n",
    "\n",
    "                elif horizontal_count is self.colind[data_count] :\n",
    "                    horizontal_count += 1\n",
    "                    line_count -= 1\n",
    "                    data_count += 1\n",
    "            else :\n",
    "                dense.insert(vertical_count*3+horizontal_count,0)\n",
    "                horizontal_count += 0\n",
    "        return np.reshape(dense,self.shape)\n",
    "        \n",
    "    def __str__(self):\n",
    "        str = \"\"   \n",
    "        dictionnaire_variables = vars(self)  # Dictionnaire des variables de la classe\n",
    "        for i in [*dictionnaire_variables]:  # Unpacking du dictionnaire des variables pour avoir une liste des cles  \n",
    "            str += i + \" :\\n\" + \"%s\\n\\n\" % (dictionnaire_variables[i],)  #  Valeur pour variable i avec vars(self)[i]. nous utilisons le singleton pour imprimer le tuple de shape aussi\n",
    "        return str\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "list [4, 5, 6]\n",
      "self.colind[k]= 2\n",
      "j=              1\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "#test pour implentation initiale du code \n",
    "# TODO: delete this cell\n",
    "mat = SparseMatrix([(0, 1, 0), (2, 0, 0), (0, 4, 3)], (3, 3))\n",
    "#print(mat.__str__())\n",
    "#print(mat.__getitem__((2,1)))\n",
    "#print(mat.todense())\n",
    "\n",
    "mat = SparseMatrix([(0, 1, 1), (1, 0, 2), (2, 1, 4), (2, 2, 3)], (4, 3))\n",
    "#print(mat.todense())\n",
    "#print(mat.__str__())\n",
    "print(mat.__getitem__((2,1)))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mnist_dataset = np.memmap('train-images-idx3-ubyte', offset=16, shape=(60000, 28, 28))\n",
    "first_image = mnist_dataset[0].tolist() # first_image est de taille (28, 28)\n",
    "plt.imshow(first_image, cmap='gray_r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
